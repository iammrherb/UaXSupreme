/**
 * Vendor-Specific Configuration Generator
 * Generates optimized configurations for each vendor/platform
 */

class VendorConfigGenerator {
    constructor(config) {
        this.config = config;
        this.vendor = config.vendor;
        this.platform = config.platform;
    }
    
    generate() {
        switch (this.vendor) {
            case 'cisco':
                return this.generateCiscoConfig();
            case 'aruba':
                return this.generateArubaConfig();
            case 'juniper':
                return this.generateJuniperConfig();
            default:
                return this.generateGenericConfig();
        }
    }
    
    generateCiscoConfig() {
        switch (this.platform) {
            case 'ios':
            case 'ios-xe':
                return this.generateCiscoIOS();
            case 'nx-os':
                return this.generateCiscoNXOS();
            case 'wlc-9800':
                return this.generateCiscoWLC();
            default:
                return this.generateCiscoGeneric();
        }
    }
    
    generateCiscoIOS() {
        const { config } = this;
        
        let output = `!
! Cisco ${config.platform.toUpperCase()} 802.1X Configuration
! Generated by Dot1Xer Supreme Enterprise Edition
! Date: ${new Date().toISOString()}
!

`;

        // Global AAA Configuration
        output += `!
! =====================================
! AAA AND RADIUS CONFIGURATION
! =====================================

! Enable new AAA model
aaa new-model

`;

        // RADIUS server group
        if (config.radiusGroupName) {
            output += `! Define RADIUS server group
aaa group server radius ${config.radiusGroupName}
`;
            
            config.radiusServers.forEach(server => {
                output += ` server name ${server.name}\n`;
            });
            
            if (config.radiusDeadtime) {
                output += ` deadtime ${config.radiusDeadtime}\n`;
            }
            
            if (config.radiusLoadBalance) {
                output += ` load-balance method ${config.radiusLoadBalance === 'round-robin' ? 'round-robin' : 'least-outstanding'}`;
                if (config.radiusLoadBalance === 'batch-size') {
                    output += ' batch-size 5';
                }
                output += '\n';
            }
        }
        
        // RADIUS servers
        output += `
! Configure named RADIUS servers
`;
        
        config.radiusServers.forEach(server => {
            output += `radius server ${server.name}
 address ipv4 ${server.ip} auth-port ${server.authPort} acct-port ${server.acctPort}
 timeout ${config.radiusTimeout}
 retransmit ${config.radiusRetransmit}
 key ${server.secret}
`;
            
            if (config.radiusServerProbe) {
                output += ` automate-tester username ${config.probeUsername || 'radius-test'} probe-on\n`;
            }
        });
        
        // AAA method lists
        output += `
! AAA method lists
aaa authentication dot1x default group ${config.radiusGroupName}
aaa authorization network default group ${config.radiusGroupName}
`;
        
        if (config.enableAccounting) {
            config.accountingModes.forEach(mode => {
                output += `aaa accounting ${mode} default start-stop group ${config.radiusGroupName}\n`;
            });
            
            if (config.accountingInterval) {
                output += `aaa accounting update newinfo periodic ${config.accountingInterval}\n`;
            }
        }
        
        // RADIUS attributes
        output += `
! RADIUS attributes
`;
        
        if (config.radiusAttributes) {
            config.radiusAttributes.forEach(attr => {
                switch (attr) {
                    case '6':
                        output += 'radius-server attribute 6 on-for-login-auth\n';
                        output += 'radius-server attribute 6 support-multiple\n';
                        break;
                    case '8':
                        output += 'radius-server attribute 8 include-in-access-req\n';
                        break;
                    case '25':
                        output += 'radius-server attribute 25 access-request include\n';
                        break;
                    case '31':
                        output += 'radius-server attribute 31 mac format ietf upper-case\n';
                        output += 'radius-server attribute 31 send nas-port-detail mac-only\n';
                        break;
                    default:
                        output += `radius-server attribute ${attr} send\n`;
                }
            });
        }
        
        if (config.enableVsa) {
            output += 'radius-server vsa send authentication\n';
            output += 'radius-server vsa send accounting\n';
        }
        
        if (config.radiusDeadDetection) {
            output += `radius-server dead-criteria time 5 tries 3\n`;
        }
        
        // CoA configuration
        if (config.enableCoa) {
            output += `
! Change of Authorization (CoA)
aaa server radius dynamic-author
`;
            config.radiusServers.forEach(server => {
                output += ` client ${server.ip} server-key ${server.secret}\n`;
            });
            output += ` port ${config.coaPort || '1700'}\n`;
            output += ` auth-type ${config.coaType || 'any'}\n`;
        }
        
        // RadSec configuration
        if (config.enableRadsec && config.platform === 'ios-xe') {
            output += `
! RadSec configuration
crypto pki trustpoint RADSEC-TP
 enrollment terminal
 revocation-check none

`;
            config.radiusServers.forEach((server, index) => {
                output += `radius server RADSEC-${index + 1}
 address ipv4 ${server.ip} auth-port ${config.radsecPort} acct-port ${config.radsecPort}
 key ${server.secret}
 tls-server RADSEC-TP
 tls version ${config.radsecTlsVersion || '1.2'}
`;
                
                if (config.enableDtls) {
                    output += ` dtls trustpoint server RADSEC-TP\n`;
                    output += ` dtls trustpoint client RADSEC-TP\n`;
                }
            });
        }
        
        // TACACS+ configuration
        if (config.enableTacacs) {
            output += `
! =====================================
! TACACS+ CONFIGURATION
! =====================================

`;
            
            if (config.tacacsGroupName) {
                output += `aaa group server tacacs+ ${config.tacacsGroupName}\n`;
                config.tacacsServers.forEach(server => {
                    output += ` server name TACACS-${server.ip}\n`;
                });
            }
            
            config.tacacsServers.forEach(server => {
                output += `
tacacs server TACACS-${server.ip}
 address ipv4 ${server.ip} port ${server.port}
 key ${server.key}
 timeout ${server.timeout}
`;
            });
            
            // TACACS+ method lists
            config.tacacsAuthz.forEach(auth => {
                output += `aaa authorization ${auth} default group ${config.tacacsGroupName} local\n`;
            });
            
            config.tacacsAcct.forEach(acct => {
                output += `aaa accounting ${acct} default start-stop group ${config.tacacsGroupName}\n`;
            });
            
            // Command accounting
            if (config.tacacsCmdLevels.length > 0) {
                config.tacacsCmdLevels.forEach(level => {
                    output += `aaa authorization commands ${level} default group ${config.tacacsGroupName} local\n`;
                    output += `aaa accounting commands ${level} default start-stop group ${config.tacacsGroupName}\n`;
                });
            }
        }
        
        // 802.1X global configuration
        output += `
! =====================================
! GLOBAL 802.1X CONFIGURATION
! =====================================

! Enable 802.1X
dot1x system-auth-control
dot1x critical eapol

`;
        
        // IBNS 2.0 configuration
        if (config.enableIbns2 && config.platform === 'ios-xe') {
            output += this.generateCiscoIBNS2();
        } else {
            output += this.generateCiscoClassic802_1X();
        }
        
        // Security features
        output += this.generateCiscoSecurityFeatures();
        
        // Fallback configuration
        if (config.fallbackLocal) {
            output += `
! Local fallback user
username ${config.localUsername} privilege 15 secret ${config.localPassword}
`;
        }
        
        // Show commands
        output += `
! =====================================
! VERIFICATION COMMANDS
! =====================================

! show authentication sessions
! show authentication sessions interface ${config.interface}
! show dot1x all
! show radius statistics
! show radius server-group all
`;
        
        if (config.enableDeviceTracking) {
            output += '! show device-tracking database\n';
        }
        
        if (config.enableTacacs) {
            output += '! show tacacs\n';
        }
        
        return output;
    }
    
    generateCiscoIBNS2() {
        const { config } = this;
        
        let output = `
! =====================================
! IBNS 2.0 CONFIGURATION
! =====================================

! Convert to new-style configuration
authentication convert-to new-style

`;
        
        // Class maps
        output += `! Class maps for authentication
`;
        
        if (config.classMaps.includes('dot1x')) {
            output += `class-map type control subscriber match-all DOT1X
 match method dot1x
`;
        }
        
        if (config.classMaps.includes('mab')) {
            output += `class-map type control subscriber match-all MAB
 match method mab
`;
        }
        
        if (config.classMaps.includes('dot1x-failed')) {
            output += `class-map type control subscriber match-all DOT1X_FAILED
 match method dot1x
 match result-type method dot1x authoritative
`;
        }
        
        if (config.classMaps.includes('aaa-down')) {
            output += `class-map type control subscriber match-all AAA_SVR_DOWN_UNAUTHD_HOST
 match result-type aaa-timeout
 match authorization-status unauthorized

class-map type control subscriber match-all AAA_SVR_DOWN_AUTHD_HOST
 match result-type aaa-timeout
 match authorization-status authorized
`;
        }
        
        // Service templates
        output += `
! Service templates
`;
        
        if (config.enableCriticalAuth && config.criticalVlan) {
            output += `service-template CRITICAL_ACCESS
 vlan ${config.criticalVlan}
`;
        }
        
        // Policy map
        output += `
! Policy map for ${config.concurrentAuth ? 'concurrent' : 'sequential'} authentication
policy-map type control subscriber ${config.policyMapName}
`;
        
        if (config.concurrentAuth) {
            output += ` event session-started match-all
  10 class always do-all
   10 authenticate using dot1x priority 10
   20 authenticate using mab priority 20
`;
        } else {
            output += ` event session-started match-all
  10 class always do-until-failure
   10 authenticate using dot1x priority 10
`;
        }
        
        output += ` event authentication-failure match-first
  5 class DOT1X_FAILED do-until-failure
   10 terminate dot1x
   20 authenticate using mab priority 20
  10 class AAA_SVR_DOWN_UNAUTHD_HOST do-until-failure
   10 activate service-template CRITICAL_ACCESS
   20 authorize
   30 pause reauthentication
  20 class AAA_SVR_DOWN_AUTHD_HOST do-until-failure
   10 pause reauthentication
   20 authorize
`;
        
        // Interface template
        output += `
! Interface template
template ${config.authMode.toUpperCase()}_TEMPLATE
 dot1x pae authenticator
 dot1x timeout tx-period ${config.txPeriod}
 dot1x max-reauth-req 2
`;
        
        if (config.authOrder.includes('mab')) {
            output += ' mab\n';
        }
        
        output += ` access-session host-mode ${config.hostMode}
 access-session control-direction ${config.controlDirection === 'in' ? 'in' : 'both'}
 access-session port-control auto
 authentication periodic
 authentication timer reauthenticate server
 service-policy type control subscriber ${config.policyMapName}
`;
        
        // Interface configuration
        output += `
! Interface configuration
interface ${config.interface}
 description 802.1X Enabled Port
 switchport mode access
 switchport access vlan ${config.vlanAuth || '1'}
`;
        
        if (config.vlanVoice) {
            output += ` switchport voice vlan ${config.vlanVoice}\n`;
        }
        
        output += ` source template ${config.authMode.toUpperCase()}_TEMPLATE
`;
        
        return output;
    }
    
    generateCiscoClassic802_1X() {
        const { config } = this;
        
        let output = `
! Interface configuration
interface ${config.interface}
 description 802.1X Enabled Port
 switchport mode access
 switchport access vlan ${config.vlanAuth || '1'}
`;
        
        if (config.vlanVoice) {
            output += ` switchport voice vlan ${config.vlanVoice}\n`;
        }
        
        output += `
 ! 802.1X configuration
 authentication host-mode ${config.hostMode}
 authentication order ${config.authOrder.join(' ')}
 authentication priority ${config.authPriority.join(' ')}
 authentication port-control auto
`;
        
        if (config.reauthControl === 'periodic') {
            output += ' authentication periodic\n';
            output += ` authentication timer reauthenticate ${config.reauthPeriod}\n`;
        } else if (config.reauthControl === 'server') {
            output += ' authentication timer reauthenticate server\n';
        }
        
        if (config.authOrder.includes('dot1x')) {
            output += ` dot1x pae authenticator
 dot1x timeout tx-period ${config.txPeriod}
 dot1x timeout quiet-period ${config.quietPeriod}
 dot1x max-reauth-req 2
`;
        }
        
        if (config.authOrder.includes('mab')) {
            output += ' mab\n';
            
            if (config.mabEapMd5) {
                output += ' mab eap\n';
            }
        }
        
        if (config.enableCriticalAuth) {
            output += ` authentication event server dead action authorize vlan ${config.criticalVlan || config.vlanAuth}\n`;
            output += ` authentication event server alive action ${config.criticalRecovery || 'reinitialize'}\n`;
        }
        
        if (config.vlanGuest) {
            output += ` authentication event no-response action authorize vlan ${config.vlanGuest}\n`;
        }
        
        return output;
    }
    
    generateCiscoSecurityFeatures() {
        const { config } = this;
        let output = `
! =====================================
! SECURITY FEATURES
! =====================================

`;
        
        if (config.enableDhcpSnooping) {
            output += `! DHCP Snooping
ip dhcp snooping
ip dhcp snooping vlan ${config.dhcpSnoopingVlans || config.vlanAuth}
`;
            
            if (!config.dhcpOption82) {
                output += 'no ip dhcp snooping information option\n';
            }
            
            output += '\n';
        }
        
        if (config.enableDai) {
            output += `! Dynamic ARP Inspection
ip arp inspection vlan ${config.daiVlans || config.vlanAuth}
`;
            
            const validation = [];
            if (config.daiValidateSrc) validation.push('src-mac');
            if (config.daiValidateDst) validation.push('dst-mac');
            if (config.daiValidateIp) validation.push('ip');
            
            if (validation.length > 0) {
                output += `ip arp inspection validate ${validation.join(' ')}\n`;
            }
            
            output += '\n';
        }
        
        if (config.enableIpsg) {
            output += `! IP Source Guard
interface ${config.interface}
 ip verify source
`;
        }
        
        if (config.enablePortSecurity) {
            output += `
! Port Security
interface ${config.interface}
 switchport port-security
 switchport port-security maximum ${config.portSecurityMax}
 switchport port-security violation ${config.portSecurityViolation}
`;
        }
        
        if (config.enableDeviceTracking) {
            output += `
! Device Tracking
${config.platform === 'ios-xe' && config.security?.includes('device-tracking-v2') ? `
device-tracking upgrade-cli force
device-tracking tracking auto-source

device-tracking policy ${config.trackingPolicy}
 tracking enable
` : `
ip device tracking
`}

interface ${config.interface}
 ${config.platform === 'ios-xe' ? 'device-tracking attach-policy' : 'ip device tracking maximum'} ${config.trackingPolicy || '10'}
`;
        }
        
        if (config.enableStormControl) {
            output += `
! Storm Control
interface ${config.interface}
 storm-control broadcast level ${config.stormBroadcast}
 storm-control multicast level ${config.stormMulticast}
 storm-control unicast level ${config.stormUnicast}
 storm-control action trap
`;
        }
        
        if (config.enableMacsec) {
            output += `
! MACsec Configuration
mka policy ${config.mkaPolicy}
 key-server priority 0
 macsec-cipher-suite ${config.macsecCipher}

interface ${config.interface}
 mka policy ${config.mkaPolicy}
 macsec network-link
`;
        }
        
        return output;
    }
    
    generateArubaConfig() {
        switch (this.platform) {
            case 'aos-cx':
                return this.generateArubaAOSCX();
            case 'aos':
                return this.generateArubaAOS();
            default:
                return this.generateArubaGeneric();
        }
    }
    
    generateArubaAOSCX() {
        const { config } = this;
        
        let output = `!
! Aruba AOS-CX 802.1X Configuration
! Generated by Dot1Xer Supreme Enterprise Edition
! Date: ${new Date().toISOString()}
!

`;

        // RADIUS servers
        output += `! Configure RADIUS servers
`;
        
        config.radiusServers.forEach(server => {
            output += `radius-server host ${server.ip} key ${server.secret}
radius-server host ${server.ip} auth-port ${server.authPort} acct-port ${server.acctPort}
radius-server host ${server.ip} timeout ${config.radiusTimeout}
radius-server host ${server.ip} retransmit ${config.radiusRetransmit}
`;
        });
        
        // RADIUS server group
        if (config.radiusGroupName) {
            output += `
! RADIUS server group
aaa group server radius ${config.radiusGroupName}
`;
            config.radiusServers.forEach(server => {
                output += `    server ${server.ip}
`;
            });
            
            if (config.radiusDeadtime) {
                output += `    dead-time ${config.radiusDeadtime}
`;
            }
        }
        
        // AAA configuration
        output += `
! AAA configuration
aaa authentication port-access dot1x authenticator
aaa authentication port-access mac-auth
aaa authentication port-access eap-radius
aaa authentication port-access dot1x default group ${config.radiusGroupName}
aaa authorization port-access default group ${config.radiusGroupName}
`;
        
        if (config.enableAccounting) {
            output += `aaa accounting port-access default start-stop group ${config.radiusGroupName}
`;
        }
        
        // Global settings
        output += `
! Port access settings
aaa port-access authenticator active
aaa port-access authenticator reauth-period ${config.reauthPeriod}
aaa port-access authenticator quiet-period ${config.quietPeriod}
aaa port-access authenticator tx-period ${config.txPeriod}
`;
        
        if (config.enableClearpass) {
            output += `
! ClearPass integration
aaa authentication port-access cppm
aaa authentication port-access cppm server ${config.clearpassServer}
`;
        }
        
        // Interface configuration
        output += `
! Interface configuration
interface ${config.interface}
    no shutdown
    aaa authentication port-access active
    aaa authentication port-access reauth-period ${config.reauthPeriod}
    aaa authentication port-access max-requests 2
    aaa authentication port-access quiet-period ${config.quietPeriod}
    aaa authentication port-access tx-period ${config.txPeriod}
    aaa authentication port-access client-limit ${config.maxSessions || '256'}
`;
        
        if (config.authOrder.includes('dot1x')) {
            output += `    aaa authentication port-access dot1x authenticator
    aaa authentication port-access dot1x vlan ${config.vlanAuth}
`;
        }
        
        if (config.authOrder.includes('mab')) {
            output += `    aaa authentication port-access mac-auth
    aaa authentication port-access mac-auth vlan ${config.vlanAuth}
`;
        }
        
        if (config.vlanGuest) {
            output += `    aaa authentication port-access guest-vlan ${config.vlanGuest}
`;
        }
        
        if (config.vlanRestricted) {
            output += `    aaa authentication port-access auth-fail-vlan ${config.vlanRestricted}
`;
        }
        
        // Security features
        if (config.enableDhcpSnooping) {
            output += `
! DHCP Snooping
dhcp-snooping
dhcp-snooping vlan ${config.dhcpSnoopingVlans || config.vlanAuth}
`;
        }
        
        if (config.enableDai) {
            output += `
! ARP protection
arp-protect
arp-protect vlan ${config.daiVlans || config.vlanAuth}
`;
        }
        
        return output;
    }
    
    generateJuniperConfig() {
        // Implementation for Juniper configurations
        // Similar pattern to Cisco and Aruba
        return `# Juniper configuration implementation`;
    }
    
    generateGenericConfig() {
        const { config } = this;
        
        return `!
! Generic 802.1X Configuration
! Vendor: ${config.vendor}
! Platform: ${config.platform}
!

! RADIUS Configuration:
! Primary Server: ${config.radiusServers[0]?.ip}
! Group Name: ${config.radiusGroupName}

! Interface: ${config.interface}
! Host Mode: ${config.hostMode}
! Auth Mode: ${config.authMode}

! This is a generic template. Please consult your vendor documentation.
`;
    }
}
